{"componentChunkName":"component---src-templates-blog-post-js","path":"/03-Express + TypeScript 프로젝트 세팅/","result":{"data":{"site":{"siteMetadata":{"title":"thumbzzero's blog"}},"markdownRemark":{"id":"08d6ac66-65a9-56a6-907a-024f9a977e60","excerpt":"npm init 터미널에 을 실행한 뒤 터미널에 뜨는 각종 정보(ex. 프로젝트명, description, 라이선스 등)를 입력한다. default…","html":"<h3>npm init</h3>\n<p>터미널에 <code class=\"language-text\">npm init</code>을 실행한 뒤 터미널에 뜨는 각종 정보(ex. 프로젝트명, description, 라이선스 등)를 입력한다.<br>\ndefault 값을 사용하고 싶은 경우에는 그냥 <code class=\"language-text\">Enter</code>를 치면 된다!<br>\n모두 입력을 마치면 입력한 정보를 기반으로 <code class=\"language-text\">package.json</code> 파일이 생성된다.</p>\n<p><code class=\"language-text\">npm init --yes</code>를 입력하면 각종 정보 입력하는 과정은 스킵하고 default 값으로 바로 생성이 된다.<br>\n(물론 나중에 수정이 가능하다.)</p>\n<h3>TypeScript 설치</h3>\n<p>TypeScript가 이미 설치되어 있으면 생략이 가능하다.<br>\n<code class=\"language-text\">tsc -v</code> 명령어를 실행해서 설치 여부를 확인한 뒤 설치가 필요한 경우 <code class=\"language-text\">npm i -g typescript</code> 명령어를 통해 설치한다.</p>\n<h3>tsc --init</h3>\n<p><code class=\"language-text\">tsc --init</code> 명령어를 실행한다.<br>\n실행하고 나면 <code class=\"language-text\">tsconfig.json</code>이라는 파일이 생성된다.</p>\n<p>기본으로 생성된 파일 내용에서 설정하고 싶은 값들을 수정해 주면 된다.<br>\n값에 대한 설명은 주석으로 적혀 있으니 참고하면 된다.<br>\n설정해 준 값의 예시로</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build\"</span>                                   <span class=\"token comment\">/* Specify an output folder for all emitted files. */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">outDir</code> 값은 컴파일된 JavaScript 파일이 저장되는 디렉토리를 설정하는 값이다.\n위와 같이 설정할 경우 컴파일된 JavaScript 파일이 build 폴더 안에 저장된다.</p>\n<h5>전체 파일 내용</h5>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Visit https://aka.ms/tsconfig to read more about this file */</span>\n\n    <span class=\"token comment\">/* Projects */</span>\n    <span class=\"token comment\">// \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */</span>\n    <span class=\"token comment\">// \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span>\n    <span class=\"token comment\">// \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */</span>\n    <span class=\"token comment\">// \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */</span>\n    <span class=\"token comment\">// \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */</span>\n    <span class=\"token comment\">// \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span>\n\n    <span class=\"token comment\">/* Language and Environment */</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2016\"</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span>\n    <span class=\"token comment\">// \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span>\n    <span class=\"token comment\">// \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */</span>\n    <span class=\"token comment\">// \"experimentalDecorators\": true,                   /* Enable experimental support for legacy experimental decorators. */</span>\n    <span class=\"token comment\">// \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */</span>\n    <span class=\"token comment\">// \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */</span>\n    <span class=\"token comment\">// \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */</span>\n    <span class=\"token comment\">// \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */</span>\n    <span class=\"token comment\">// \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */</span>\n    <span class=\"token comment\">// \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */</span>\n    <span class=\"token comment\">// \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */</span>\n    <span class=\"token comment\">// \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */</span>\n\n    <span class=\"token comment\">/* Modules */</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>                                <span class=\"token comment\">/* Specify what module code is generated. */</span>\n     <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">/* Specify the root folder within your source files. */</span>\n    <span class=\"token comment\">// \"moduleResolution\": \"node10\",                     /* Specify how TypeScript looks up a file from a given module specifier. */</span>\n    <span class=\"token comment\">// \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */</span>\n    <span class=\"token comment\">// \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span>\n    <span class=\"token comment\">// \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span>\n    <span class=\"token comment\">// \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */</span>\n    <span class=\"token comment\">// \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */</span>\n    <span class=\"token comment\">// \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */</span>\n    <span class=\"token comment\">// \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */</span>\n    <span class=\"token comment\">// \"allowImportingTsExtensions\": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */</span>\n    <span class=\"token comment\">// \"resolvePackageJsonExports\": true,                /* Use the package.json 'exports' field when resolving package imports. */</span>\n    <span class=\"token comment\">// \"resolvePackageJsonImports\": true,                /* Use the package.json 'imports' field when resolving imports. */</span>\n    <span class=\"token comment\">// \"customConditions\": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */</span>\n     <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">/* Enable importing .json files. */</span>\n    <span class=\"token comment\">// \"allowArbitraryExtensions\": true,                 /* Enable importing files with any extension, provided a declaration file is present. */</span>\n    <span class=\"token comment\">// \"noResolve\": true,                                /* Disallow 'import's, 'require's or '&lt;reference>'s from expanding the number of files TypeScript should add to a project. */</span>\n\n    <span class=\"token comment\">/* JavaScript Support */</span>\n    <span class=\"token comment\">// \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */</span>\n    <span class=\"token comment\">// \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */</span>\n    <span class=\"token comment\">// \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */</span>\n\n    <span class=\"token comment\">/* Emit */</span>\n    <span class=\"token comment\">// \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span>\n    <span class=\"token comment\">// \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */</span>\n    <span class=\"token comment\">// \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */</span>\n    <span class=\"token comment\">// \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */</span>\n    <span class=\"token comment\">// \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */</span>\n    <span class=\"token comment\">// \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */</span>\n     <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build\"</span><span class=\"token punctuation\">,</span>                                   <span class=\"token comment\">/* Specify an output folder for all emitted files. */</span>\n    <span class=\"token comment\">// \"removeComments\": true,                           /* Disable emitting comments. */</span>\n    <span class=\"token comment\">// \"noEmit\": true,                                   /* Disable emitting files from a compilation. */</span>\n    <span class=\"token comment\">// \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span>\n    <span class=\"token comment\">// \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span>\n    <span class=\"token comment\">// \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */</span>\n    <span class=\"token comment\">// \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span>\n    <span class=\"token comment\">// \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span>\n    <span class=\"token comment\">// \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span>\n    <span class=\"token comment\">// \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */</span>\n    <span class=\"token comment\">// \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */</span>\n    <span class=\"token comment\">// \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */</span>\n    <span class=\"token comment\">// \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */</span>\n    <span class=\"token comment\">// \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */</span>\n    <span class=\"token comment\">// \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */</span>\n\n    <span class=\"token comment\">/* Interop Constraints */</span>\n    <span class=\"token comment\">// \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span>\n    <span class=\"token comment\">// \"verbatimModuleSyntax\": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */</span>\n    <span class=\"token comment\">// \"isolatedDeclarations\": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */</span>\n    <span class=\"token comment\">// \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                             <span class=\"token comment\">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */</span>\n    <span class=\"token comment\">// \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">/* Ensure that casing is correct in imports. */</span>\n\n    <span class=\"token comment\">/* Type Checking */</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                                      <span class=\"token comment\">/* Enable all strict type-checking options. */</span>\n     <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                            <span class=\"token comment\">/* Enable error reporting for expressions and declarations with an implied 'any' type. */</span>\n    <span class=\"token comment\">// \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */</span>\n    <span class=\"token comment\">// \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span>\n    <span class=\"token comment\">// \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */</span>\n    <span class=\"token comment\">// \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */</span>\n    <span class=\"token comment\">// \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */</span>\n    <span class=\"token comment\">// \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */</span>\n    <span class=\"token comment\">// \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */</span>\n    <span class=\"token comment\">// \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */</span>\n    <span class=\"token comment\">// \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */</span>\n    <span class=\"token comment\">// \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */</span>\n    <span class=\"token comment\">// \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */</span>\n    <span class=\"token comment\">// \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */</span>\n    <span class=\"token comment\">// \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */</span>\n    <span class=\"token comment\">// \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span>\n    <span class=\"token comment\">// \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */</span>\n    <span class=\"token comment\">// \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */</span>\n    <span class=\"token comment\">// \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */</span>\n\n    <span class=\"token comment\">/* Completeness */</span>\n    <span class=\"token comment\">// \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span>\n    <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>                                 <span class=\"token comment\">/* Skip type checking all .d.ts files. */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>express 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install express\nnpm install -D @types/express</code></pre></div>\n<h3>nodemon 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i nodemon --save-dev</code></pre></div>\n<p>nodemon은 코드 저장 시 자동으로 재실행하기 위해 설치한다.</p>\n<h3>/src/app.ts</h3>\n<p>소스코드는 src 디렉토리 내에서 모두 관리하기 위해 src 디렉토리 아래에 app.ts를 생성해 주었다.</p>\n<h3>package.json 수정</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/app.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"compile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc &amp;&amp; node ./build/src/app.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon -e ts --exec \\\"npm run compile\\\"\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main</code>값은 최초 실행 파일을 의미한다.\n저렇게 설정할 경우 src/app.ts가 실행되며,\napp.ts를 src가 아닌 최상단에 설정한 경우에는 <code class=\"language-text\">app.ts</code>라고만 작성하면 된다.</p>\n<p>그리고 위와 같이 <code class=\"language-text\">scripts</code>를 지정해 준다.\n서버를 실행할 때는 <code class=\"language-text\">npm start</code> 명령어를 사용하면 실행이 되며, 저장을 할 때마다 nodemon이 새로 컴파일을 해준다.<br>\n(※ 이 역시 프로젝트 최상단의 app.ts를 실행하고자 하는 경우에는<br>\n<code class=\"language-text\">\"compile\": \"tsc &amp;&amp; node ./build/app.js\"</code>로 수정해 준다.)</p>\n<h3>gitignore 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># dependencies\n/node_modules\n\n# production\n/build\n\n.DS_Store\n*.idea\n\n.env</code></pre></div>\n<p>프로젝트 최상단에 <strong>.gitignore</strong> 파일을 생성한 뒤 git에서 변경사항을 추적하지 않을 파일을 추가해 준다.</p>\n<p>설치한 모듈의 코드가 들어있는 <strong>/node_module</strong>,<br>\n컴파일된 파일이 저장된 <strong>/build</strong>,<br>\n그리고 macOS 사용자는 <strong>.DS_Store</strong> (macOS에서 자동 생성),<br>\nWebStorm 등 JetBrains IDE 사용 중이라면 *<strong>.idea</strong>(IDE에서 자동 생성하는 프로젝트별 설정값 저장 폴더)도 추가해 준다.</p>\n<p>또, 환경 변수를 관리할 .env 파일도 추가한다.</p>","frontmatter":{"title":"Express + TypeScript 프로젝트 세팅","date":"August 08, 2024","description":"Express + TypeScript 프로젝트 세팅하기"}},"previous":{"fields":{"slug":"/02-모바일 사파리 hydration 오류/"},"frontmatter":{"title":"모바일 사파리 hydration 오류"}},"next":null},"pageContext":{"id":"08d6ac66-65a9-56a6-907a-024f9a977e60","previousPostId":"25780daa-484b-5910-bbb9-c3b5a4814483","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}